import React, { useState, useEffect } from "react";
import { Card, Button, Table, message, Modal, Input, Form, Spin } from "antd";
import { motion, AnimatePresence } from "framer-motion";
import {
  ReloadOutlined,
  TrophyOutlined,
  ClockCircleOutlined,
} from "@ant-design/icons";
import Quiz from "../components/Quiz";

// MockAPI endpoint for quiz results
const API_URL = "https://68df99fc898434f413584136.mockapi.io/api/quizResults";

const QuizPage = () => {
  const [selectedQuiz, setSelectedQuiz] = useState("hcm_ideology");
  const [quizResults, setQuizResults] = useState([]);
  const [loadingResults, setLoadingResults] = useState(false);
  const [showResultModal, setShowResultModal] = useState(false);
  const [playerName, setPlayerName] = useState("");
  const [currentScore, setCurrentScore] = useState(null);
  const [quizStartTime, setQuizStartTime] = useState(null);
  const [quizEndTime, setQuizEndTime] = useState(null);
  const [completionTime, setCompletionTime] = useState(null);
  const [form] = Form.useForm();

  // Fetch quiz results on component mount
  useEffect(() => {
    fetchQuizResults();
    // Set start time when component mounts (user starts quiz)
    setQuizStartTime(new Date().toISOString());
  }, []);

  const fetchQuizResults = async () => {
    setLoadingResults(true);
    try {
      const response = await fetch(API_URL);
      if (!response.ok) throw new Error("Failed to fetch results");

      const data = await response.json();
      // Sort by score descending, then by completion time (fastest first)
      const sortedData = data
        .filter((result) => result.isFinished)
        .sort((a, b) => {
          // First compare scores
          if (b.score !== a.score) return b.score - a.score;
          
          // If scores are equal, compare completion time (shortest first)
          const timeA = a.completionTimeSeconds || Infinity;
          const timeB = b.completionTimeSeconds || Infinity;
          return timeA - timeB;
        });

      setQuizResults(sortedData);
    } catch (error) {
      console.error("Error fetching quiz results:", error);
      message.error("Kh√¥ng th·ªÉ t·∫£i b·∫£ng x·∫øp h·∫°ng!");
    } finally {
      setLoadingResults(false);
    }
  };

  const formatTime = (seconds) => {
    if (!seconds) return "N/A";
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
  };

  const saveQuizResult = async (score, totalQuestions, isFinished) => {
    if (!playerName.trim()) {
      message.warning("Vui l√≤ng nh·∫≠p t√™n c·ªßa b·∫°n!");
      return;
    }

    try {
      const newResult = {
        playerName: playerName.trim(),
        score: score,
        totalQuestions: totalQuestions,
        isFinished: isFinished,
        startTime: quizStartTime,
        endTime: quizEndTime,
        completionTimeSeconds: completionTime,
      };

      const response = await fetch(API_URL, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(newResult),
      });

      if (!response.ok) throw new Error("Failed to save result");

      message.success("K·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!");
      setShowResultModal(false);
      setPlayerName("");
      form.resetFields();
      await fetchQuizResults();
      
      // Reset times for next attempt
      setQuizStartTime(new Date().toISOString());
      setQuizEndTime(null);
      setCompletionTime(null);
    } catch (error) {
      console.error("Error saving quiz result:", error);
      message.error("Kh√¥ng th·ªÉ l∆∞u k·∫øt qu·∫£. Vui l√≤ng th·ª≠ l·∫°i!");
    }
  };

  const handleQuizComplete = (score, totalQuestions) => {
    // Calculate completion time when quiz completes (before modal shows)
    const endTime = new Date();
    const startTime = new Date(quizStartTime);
    const timeInSeconds = Math.round((endTime - startTime) / 1000);
    
    setQuizEndTime(endTime.toISOString());
    setCompletionTime(timeInSeconds);
    setCurrentScore({ score, totalQuestions });
    setShowResultModal(true);
  };

  const quizzes = {
    hcm_ideology: {
      title: "T∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh v·ªÅ ƒê·∫£ng v√† Nh√† n∆∞·ªõc",
      icon: "üèõÔ∏è",
      questions: [
        {
          question: "Theo H·ªì Ch√≠ Minh, ƒê·∫£ng ph·∫£i l√† g√¨ ƒë·ªëi v·ªõi nh√¢n d√¢n?",
          options: [
            "Ng∆∞·ªùi l√£nh ƒë·∫°o tuy·ªát ƒë·ªëi",
            "Ng∆∞·ªùi anh c·∫£ th·∫≠t s·ª± v√† c√¥ng b·ªôc trung th√†nh",
            "C∆° quan quy·ªÅn l·ª±c cao nh·∫•t",
            "ƒê·∫°i di·ªán ch√≠nh tr·ªã duy nh·∫•t",
          ],
          correctAnswer: 1,
          explanation:
            "H·ªì Ch√≠ Minh kh·∫≥ng ƒë·ªãnh: 'ƒê·∫£ng ph·∫£i l√† ng∆∞·ªùi anh c·∫£ th·∫≠t s·ª± c·ªßa nh√¢n d√¢n, l√† c√¥ng b·ªôc th·∫≠t trung th√†nh c·ªßa nh√¢n d√¢n'",
        },
        {
          question: "H·ªì Ch√≠ Minh coi tham √¥, l√£ng ph√≠, quan li√™u l√† g√¨?",
          options: [
            "V·∫•n ƒë·ªÅ x√£ h·ªôi th√¥ng th∆∞·ªùng",
            "Gi·∫∑c n·ªôi x√¢m",
            "Khuy·∫øt ƒëi·ªÉm nh·ªè",
            "Hi·ªán t∆∞·ª£ng t·∫°m th·ªùi",
          ],
          correctAnswer: 1,
          explanation:
            "H·ªì Ch√≠ Minh g·ªçi tham √¥, l√£ng ph√≠, quan li√™u l√† 'gi·∫∑c n·ªôi x√¢m', 'gi·∫∑c ·ªü trong l√≤ng', nguy hi·ªÉm h∆°n gi·∫∑c ngo·∫°i x√¢m",
        },
        {
          question:
            "Theo t∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh, 'Nh√† n∆∞·ªõc c·ªßa d√¢n, do d√¢n, v√¨ d√¢n' c√≥ nghƒ©a l√† g√¨?",
          options: [
            "Ch·ªâ do d√¢n b·∫ßu ra",
            "Quy·ªÅn l·ª±c thu·ªôc v·ªÅ nh√¢n d√¢n, do nh√¢n d√¢n th·ª±c hi·ªán v√† ph·ª•c v·ª• nh√¢n d√¢n",
            "Nh√† n∆∞·ªõc l√†m t·∫•t c·∫£ cho d√¢n",
            "D√¢n quy·∫øt ƒë·ªãnh m·ªçi vi·ªác",
          ],
          correctAnswer: 1,
          explanation:
            "Ba nguy√™n t·∫Øc: C·ª¶A D√ÇN (quy·ªÅn l·ª±c thu·ªôc v·ªÅ nh√¢n d√¢n), DO D√ÇN (nh√¢n d√¢n tham gia qu·∫£n l√Ω), V√å D√ÇN (ph·ª•c v·ª• l·ª£i √≠ch nh√¢n d√¢n)",
        },
        {
          question:
            "T·∫°i sao H·ªì Ch√≠ Minh cho r·∫±ng ki·ªÉm so√°t quy·ªÅn l·ª±c nh√† n∆∞·ªõc l√† t·∫•t y·∫øu?",
          options: [
            "ƒê·ªÉ tr√°nh ƒë·ªôc t√†i",
            "V√¨ quy·ªÅn l·ª±c do nh√¢n d√¢n ·ªßy th√°c, kh√¥ng ki·ªÉm so√°t s·∫Ω d·∫´n ƒë·∫øn l·∫°m quy·ªÅn",
            "ƒê·ªÉ th·ª±c hi·ªán d√¢n ch·ªß",
            "V√¨ lu·∫≠t ph√°p quy ƒë·ªãnh",
          ],
          correctAnswer: 1,
          explanation:
            "H·ªì Ch√≠ Minh kh·∫≥ng ƒë·ªãnh: quy·ªÅn l·ª±c do nh√¢n d√¢n ·ªßy th√°c cho Nh√† n∆∞·ªõc, n·∫øu kh√¥ng ki·ªÉm so√°t th√¨ c∆° quan v√† c√°n b·ªô nh√† n∆∞·ªõc c√≥ th·ªÉ tr·ªü n√™n l·∫°m quy·ªÅn",
        },
        {
          question:
            "Theo H·ªì Ch√≠ Minh, ai l√† ch·ªß th·ªÉ t·ªëi cao trong vi·ªác ki·ªÉm so√°t quy·ªÅn l·ª±c nh√† n∆∞·ªõc?",
          options: ["ƒê·∫£ng C·ªông s·∫£n", "Qu·ªëc h·ªôi", "Nh√¢n d√¢n", "Ch√≠nh ph·ªß"],
          correctAnswer: 2,
          explanation:
            "H·ªì Ch√≠ Minh kh·∫≥ng ƒë·ªãnh: 'Nh√¢n d√¢n l√† ch·ªß th·ªÉ t·ªëi cao c·ªßa quy·ªÅn l·ª±c nh√† n∆∞·ªõc, v√¨ th·∫ø nh√¢n d√¢n c√≥ quy·ªÅn ki·ªÉm so√°t quy·ªÅn l·ª±c nh√† n∆∞·ªõc'",
        },
        {
          question:
            "Trong t∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh, b·ªánh quan li√™u c√≥ ƒë·∫∑c ƒëi·ªÉm g√¨?",
          options: [
            "L√†m vi·ªác kh√¥ng hi·ªáu qu·∫£",
            "Kh√¥ng s√°t vi·ªác, kh√¥ng g·∫ßn g≈©i qu·∫ßn ch√∫ng, l√† b·ªánh g·ªëc sinh ra tham √¥ l√£ng ph√≠",
            "Thi·∫øu tr√°ch nhi·ªám",
            "L√†m vi·ªác ch·∫≠m ch·∫°p",
          ],
          correctAnswer: 1,
          explanation:
            "H·ªì Ch√≠ Minh cho r·∫±ng quan li√™u l√† cƒÉn b·ªánh khi·∫øn c√°n b·ªô kh√¥ng s√°t vi·ªác, kh√¥ng g·∫ßn g≈©i qu·∫ßn ch√∫ng, kh√¥ng ki·ªÉm tra, l√† 'b·ªánh g·ªëc sinh ra tham √¥, l√£ng ph√≠'",
        },
        {
          question:
            "Theo H·ªì Ch√≠ Minh, ƒë∆∞·ªùng l·ªëi c·ªßa ƒê·∫£ng ph·∫£i d·ª±a tr√™n n·ªÅn t·∫£ng n√†o?",
          options: [
            "Kinh nghi·ªám th·ª±c ti·ªÖn",
            "M√°c-L√™nin s√°ng t·∫°o v√† t∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh",
            "√ù ki·∫øn nh√¢n d√¢n",
            "T√¨nh h√¨nh qu·ªëc t·∫ø",
          ],
          correctAnswer: 1,
          explanation:
            "ƒê∆∞·ªùng l·ªëi ph·∫£i d·ª±a tr√™n n·ªÅn t·∫£ng l√Ω lu·∫≠n M√°c-L√™nin s√°ng t·∫°o v√† t∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh, ph√π h·ª£p v·ªõi ho√†n c·∫£nh ƒë·∫•t n∆∞·ªõc t·ª´ng giai ƒëo·∫°n",
        },
        {
          question:
            "Trong c√¥ng t√°c x√¢y d·ª±ng ƒê·∫£ng, H·ªì Ch√≠ Minh ƒë·∫∑c bi·ªát ch√∫ tr·ªçng ƒë·∫•u tranh ch·ªëng ƒëi·ªÅu g√¨?",
          options: [
            "T∆∞ t∆∞·ªüng c·ª±c ƒëoan",
            "Suy tho√°i v·ªÅ t∆∞ t∆∞·ªüng ch√≠nh tr·ªã, ƒë·∫°o ƒë·ª©c, l·ªëi s·ªëng",
            "Ch·ªß nghƒ©a c√° nh√¢n",
            "Tham nh≈©ng quy·ªÅn l·ª±c",
          ],
          correctAnswer: 1,
          explanation:
            "C·∫ßn ƒë·∫•u tranh ch·ªëng c√°c bi·ªÉu hi·ªán 'suy tho√°i v·ªÅ t∆∞ t∆∞·ªüng ch√≠nh tr·ªã, ƒë·∫°o ƒë·ª©c, l·ªëi s·ªëng', 't·ª± di·ªÖn bi·∫øn', 't·ª± chuy·ªÉn h√≥a'",
        },
        {
          question: "ƒê·∫£ng vi√™n theo t∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh ph·∫£i c√≥ ƒë·∫∑c ƒëi·ªÉm g√¨?",
          options: [
            "Ch·ªâ c·∫ßn c√≥ nƒÉng l·ª±c",
            "V·ª´a l√† ng∆∞·ªùi l√£nh ƒë·∫°o v·ª´a l√† ng∆∞·ªùi ƒë√†y t·ªõ trung th√†nh c·ªßa nh√¢n d√¢n",
            "Ch·ªâ c·∫ßn trung th√†nh v·ªõi ƒê·∫£ng",
            "C√≥ tr√¨nh ƒë·ªô cao",
          ],
          correctAnswer: 1,
          explanation:
            "H·ªì Ch√≠ Minh n√≥i: 'ƒê·∫£ng vi√™n ph·∫£i lu√¥n x·ª©ng ƒë√°ng v·ª´a l√† ng∆∞·ªùi l√£nh ƒë·∫°o v·ª´a l√† ng∆∞·ªùi ƒë√†y t·ªõ th·∫≠t trung th√†nh c·ªßa nh√¢n d√¢n'",
        },
        {
          question:
            "Nguy√™n t·∫Øc quan tr·ªçng nh·∫•t trong c√°ch c∆∞ x·ª≠ c·ªßa c√°n b·ªô ƒë·∫£ng vi√™n theo H·ªì Ch√≠ Minh l√† g√¨?",
          options: [
            "K·ª∑ lu·∫≠t nghi√™m minh",
            "Th·ªëng nh·∫•t gi·ªØa n√≥i v√† l√†m",
            "Tu√¢n th·ªß m·ªánh l·ªánh",
            "ƒêo√†n k·∫øt n·ªôi b·ªô",
          ],
          correctAnswer: 1,
          explanation:
            "H·ªì Ch√≠ Minh ƒë·∫∑c bi·ªát nh·∫•n m·∫°nh 'th·ªëng nh·∫•t gi·ªØa n√≥i v√† l√†m' - ƒë√¢y l√† nguy√™n t·∫Øc cƒÉn b·∫£n trong t∆∞ t∆∞·ªüng v√† h√†nh ƒë·ªông",
        },
        {
          question:
            "M·ª•c ti√™u x√¢y d·ª±ng Nh√† n∆∞·ªõc theo t∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh l√† g√¨?",
          options: [
            "Nh√† n∆∞·ªõc h√πng m·∫°nh",
            "Nh√† n∆∞·ªõc th·∫≠t s·ª± trong s·∫°ch, v·ªØng m·∫°nh",
            "Nh√† n∆∞·ªõc hi·ªán ƒë·∫°i",
            "Nh√† n∆∞·ªõc d√¢n ch·ªß",
          ],
          correctAnswer: 1,
          explanation:
            "M·ª•c ti√™u l√† 'x√¢y d·ª±ng Nh√† n∆∞·ªõc th·∫≠t s·ª± trong s·∫°ch, v·ªØng m·∫°nh' c·ªßa d√¢n, do d√¢n, v√¨ d√¢n",
        },
        {
          question:
            "ƒê·ªÉ x√¢y d·ª±ng Nh√† n∆∞·ªõc hi·ªáu qu·∫£, H·ªì Ch√≠ Minh ch√∫ tr·ªçng vi·ªác g√¨?",
          options: [
            "TƒÉng c∆∞·ªùng quy·ªÅn l·ª±c",
            "Ho√†n thi·ªán ph√°p lu·∫≠t g·∫Øn v·ªõi t·ªï ch·ª©c thi h√†nh ph√°p lu·∫≠t",
            "M·ªü r·ªông b·ªô m√°y",
            "T·∫≠p trung quy·ªÅn l·ª±c",
          ],
          correctAnswer: 1,
          explanation:
            "C·∫ßn 'ƒë·∫©y m·∫°nh vi·ªác ho√†n thi·ªán ph√°p lu·∫≠t g·∫Øn v·ªõi t·ªï ch·ª©c thi h√†nh ph√°p lu·∫≠t nh·∫±m n√¢ng cao hi·ªáu l·ª±c, hi·ªáu qu·∫£ c·ªßa Nh√† n∆∞·ªõc'",
        },
        {
          question:
            "C∆° ch·∫ø ki·ªÉm so√°t quy·ªÅn l·ª±c theo H·ªì Ch√≠ Minh c·∫ßn l√†m r√µ ƒëi·ªÅu g√¨?",
          options: [
            "Vai tr√≤ c·ªßa ƒê·∫£ng",
            "C∆° ch·∫ø ph√¢n c√¥ng, ph·ªëi h·ª£p gi·ªØa l·∫≠p ph√°p, h√†nh ph√°p, t∆∞ ph√°p",
            "Quy·ªÅn h·∫°n l√£nh ƒë·∫°o",
            "Tr√°ch nhi·ªám c√° nh√¢n",
          ],
          correctAnswer: 1,
          explanation:
            "C·∫ßn 'x√°c ƒë·ªãnh r√µ c∆° ch·∫ø ph√¢n c√¥ng, ph·ªëi h·ª£p th·ª±c thi quy·ªÅn l·ª±c nh√† n∆∞·ªõc, nh·∫•t l√† c∆° ch·∫ø ki·ªÉm so√°t quy·ªÅn l·ª±c gi·ªØa c√°c c∆° quan l·∫≠p ph√°p, h√†nh ph√°p, t∆∞ ph√°p'",
        },
        {
          question:
            "Ti√™u chu·∫©n c√°n b·ªô c√¥ng ch·ª©c theo t∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh c·∫ßn c√≥ y·∫øu t·ªë n√†o?",
          options: [
            "Ch·ªâ c·∫ßn c√≥ nƒÉng l·ª±c",
            "B·∫£n lƒ©nh ch√≠nh tr·ªã v·ªØng v√†ng, ph·∫©m ch·∫•t ƒë·∫°o ƒë·ª©c trong s√°ng, nƒÉng l·ª±c chuy√™n m√¥n ph√π h·ª£p",
            "Ch·ªâ c·∫ßn trung th√†nh",
            "Ch·ªâ c·∫ßn c√≥ tr√¨nh ƒë·ªô",
          ],
          correctAnswer: 1,
          explanation:
            "C·∫ßn 'b·∫£n lƒ©nh ch√≠nh tr·ªã v·ªØng v√†ng, ph·∫©m ch·∫•t ƒë·∫°o ƒë·ª©c trong s√°ng, tr√¨nh ƒë·ªô, nƒÉng l·ª±c chuy√™n m√¥n ph√π h·ª£p'",
        },
        {
          question:
            "Nguy√™n t·∫Øc ƒë·∫•u tranh ph√≤ng ch·ªëng tham nh≈©ng theo tinh th·∫ßn H·ªì Ch√≠ Minh l√† g√¨?",
          options: [
            "C√≥ v√πng c·∫•m nh·∫•t ƒë·ªãnh",
            "Kh√¥ng c√≥ v√πng c·∫•m, kh√¥ng c√≥ ngo·∫°i l·ªá",
            "T√πy t·ª´ng tr∆∞·ªùng h·ª£p",
            "∆Øu ti√™n gi√°o d·ª•c",
          ],
          correctAnswer: 1,
          explanation:
            "Nguy√™n t·∫Øc 'kh√¥ng c√≥ v√πng c·∫•m, kh√¥ng c√≥ ngo·∫°i l·ªá' trong ƒë·∫•u tranh ph√≤ng ch·ªëng tham nh≈©ng, l√£ng ph√≠, quan li√™u",
        },
        {
          question:
            "ƒê·∫£ng l√£nh ƒë·∫°o Nh√† n∆∞·ªõc b·∫±ng c√°ch n√†o theo t∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh?",
          options: [
            "Can thi·ªáp tr·ª±c ti·∫øp",
            "C√°c ch·ªß tr∆∞∆°ng, ch√≠nh s√°ch l·ªõn v√† th·ªÉ ch·∫ø h√≥a ƒë∆∞·ªùng l·ªëi th√†nh ph√°p lu·∫≠t",
            "Quy·∫øt ƒë·ªãnh m·ªçi vi·ªác",
            "Ki·ªÉm so√°t to√†n b·ªô",
          ],
          correctAnswer: 1,
          explanation:
            "ƒê·∫£ng l√£nh ƒë·∫°o Nh√† n∆∞·ªõc b·∫±ng 'c√°c ch·ªß tr∆∞∆°ng, ch√≠nh s√°ch l·ªõn, l√£nh ƒë·∫°o th·ªÉ ch·∫ø h√≥a c√°c quan ƒëi·ªÉm, ƒë∆∞·ªùng l·ªëi th√†nh ch√≠nh s√°ch, ph√°p lu·∫≠t'",
        },
        {
          question:
            "Y·∫øu t·ªë quy·∫øt ƒë·ªãnh th√†nh c√¥ng vi·ªác x√¢y d·ª±ng Nh√† n∆∞·ªõc theo H·ªì Ch√≠ Minh l√† g√¨?",
          options: [
            "S·ª± gi√†u m·∫°nh c·ªßa ƒë·∫•t n∆∞·ªõc",
            "S·ª± trong s·∫°ch, v·ªØng m·∫°nh c·ªßa ƒê·∫£ng",
            "S·ª± ·ªßng h·ªô c·ªßa nh√¢n d√¢n",
            "H·ªá th·ªëng ph√°p lu·∫≠t ho√†n thi·ªán",
          ],
          correctAnswer: 1,
          explanation:
            "'S·ª± trong s·∫°ch, v·ªØng m·∫°nh c·ªßa ƒê·∫£ng l√† y·∫øu t·ªë quy·∫øt ƒë·ªãnh cho s·ª± th√†nh c√¥ng c·ªßa vi·ªác x√¢y d·ª±ng Nh√† n∆∞·ªõc theo t∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh'",
        },
        {
          question:
            "H·ªì Ch√≠ Minh cho r·∫±ng c√°n b·ªô c√≥ ch·ª©c v·ª• c√†ng cao th√¨ nh∆∞ th·∫ø n√†o?",
          options: [
            "Quy·ªÅn l·ª±c c√†ng l·ªõn",
            "Tr√°ch nhi·ªám c√†ng l·ªõn v√† c·∫ßn ph·∫£i l√†m g∆∞∆°ng tr∆∞·ªõc",
            "ƒê·∫∑c quy·ªÅn c√†ng nhi·ªÅu",
            "Uy t√≠n c√†ng cao",
          ],
          correctAnswer: 1,
          explanation:
            "H·ªì Ch√≠ Minh kh·∫≥ng ƒë·ªãnh: 'C√°n b·ªô, c√¥ng ch·ª©c gi·ªØ ch·ª©c v·ª• c√†ng cao, tr√°ch nhi·ªám c√†ng l·ªõn v√† c·∫ßn ph·∫£i l√†m tr∆∞·ªõc g∆∞∆°ng'",
        },
        {
          question:
            "ƒê·ªÉ ki·ªÉm so√°t quy·ªÅn l·ª±c ƒë√∫ng ƒë·∫Øn, H·ªì Ch√≠ Minh cho r·∫±ng c·∫ßn c√≥ g√¨?",
          options: [
            "H·ªá th·ªëng gi√°m s√°t",
            "Qu·∫ßn ch√∫ng gi√∫p ƒë·ª°",
            "Ph√°p lu·∫≠t nghi√™m kh·∫Øc",
            "C∆° quan chuy√™n tr√°ch",
          ],
          correctAnswer: 1,
          explanation:
            "H·ªì Ch√≠ Minh n√≥i: 'Ph·∫£i t·ªï ch·ª©c s·ª± ki·ªÉm so√°t, m√† mu·ªën ki·ªÉm so√°t ƒë√∫ng th√¨ c≈©ng ph·∫£i c√≥ qu·∫ßn ch√∫ng gi√∫p ƒë·ª°'",
        },
        {
          question:
            "Trong x√¢y d·ª±ng Nh√† n∆∞·ªõc, H·ªì Ch√≠ Minh coi tr·ªçng vi·ªác g√¨ ngo√†i ph√°p lu·∫≠t?",
          options: [
            "Truy·ªÅn th·ªëng vƒÉn h√≥a",
            "X√¢y d·ª±ng n·ªÅn t·∫£ng ƒë·∫°o ƒë·ª©c x√£ h·ªôi",
            "Gi√°o d·ª•c ch√≠nh tr·ªã",
            "Tuy√™n truy·ªÅn t∆∞ t∆∞·ªüng",
          ],
          correctAnswer: 1,
          explanation:
            "C·∫ßn 'qu·∫£n l√Ω ƒë·∫•t n∆∞·ªõc theo ph√°p lu·∫≠t, ƒë·ªìng th·ªùi coi tr·ªçng x√¢y d·ª±ng n·ªÅn t·∫£ng ƒë·∫°o ƒë·ª©c x√£ h·ªôi'",
        },
      ],
    },
  };

  const currentQuiz = quizzes[selectedQuiz];

  // Table columns for leaderboard
  const columns = [
    {
      title: "H·∫°ng",
      key: "rank",
      width: 70,
      fixed: "left",
      render: (_, __, index) => (
        <div className="flex items-center justify-center">
          {index === 0 && <span className="text-2xl">ü•á</span>}
          {index === 1 && <span className="text-2xl">ü•à</span>}
          {index === 2 && <span className="text-2xl">ü•â</span>}
          {index > 2 && (
            <span className="font-semibold text-gray-600">#{index + 1}</span>
          )}
        </div>
      ),
    },
    {
      title: "T√™n ng∆∞·ªùi ch∆°i",
      dataIndex: "playerName",
      key: "playerName",
      width: 150,
      ellipsis: true,
      render: (name) => <span className="font-semibold">{name}</span>,
    },
    {
      title: "ƒêi·ªÉm",
      key: "score",
      width: 80,
      render: (_, record) => (
        <span className="font-bold text-green-600">
          {record.score}/{record.totalQuestions}
        </span>
      ),
    },
    {
      title: "T·ª∑ l·ªá",
      key: "percentage",
      width: 80,
      render: (_, record) => {
        const percentage = Math.round(
          (record.score / record.totalQuestions) * 100
        );
        return (
          <span
            className={`font-semibold ${
              percentage >= 70
                ? "text-green-600"
                : percentage >= 50
                ? "text-yellow-600"
                : "text-red-600"
            }`}
          >
            {percentage}%
          </span>
        );
      },
    },
    {
      title: (
        <div className="flex items-center">
          <ClockCircleOutlined className="mr-1" />
          <span>Th·ªùi gian</span>
        </div>
      ),
      key: "completionTime",
      width: 100,
      render: (_, record) => (
        <div className="flex items-center">
          <span className="font-semibold text-blue-600">
            {formatTime(record.completionTimeSeconds)}
          </span>
        </div>
      ),
    },
    {
      title: "Ng√†y ho√†n th√†nh",
      dataIndex: "endTime",
      key: "endTime",
      width: 140,
      render: (time) => (
        <span className="text-gray-600 text-xs">
          {new Date(time).toLocaleString("vi-VN", {
            day: "2-digit",
            month: "2-digit",
            year: "numeric",
            hour: "2-digit",
            minute: "2-digit",
          })}
        </span>
      ),
    },
  ];

  return (
    <div className="h-screen overflow-hidden bg-gradient-to-br from-red-50 via-orange-50 to-yellow-50">
      <div className="h-full max-w-[1600px] mx-auto px-4 py-6 flex flex-col">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="flex-shrink-0"
        >
          <h1 className="text-4xl font-bold text-center mb-3 text-transparent bg-clip-text bg-gradient-to-r from-red-600 to-orange-600">
            Ki·ªÉm tra t∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh
          </h1>
          <p className="text-center text-gray-600 italic mb-6">
            "ƒê·∫£ng ph·∫£i l√† ng∆∞·ªùi anh c·∫£ th·∫≠t s·ª± c·ªßa nh√¢n d√¢n, l√† c√¥ng b·ªôc th·∫≠t
            trung th√†nh c·ªßa nh√¢n d√¢n"
          </p>
        </motion.div>

        <div className="flex-1 grid lg:grid-cols-12 gap-6 overflow-hidden">
          {/* Left side - Quiz (60% width) */}
          <div className="lg:col-span-7 flex flex-col overflow-hidden">
            {/* Quiz Selection */}
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.2 }}
              className="flex-shrink-0 mb-4"
            >
              <Card className="shadow-lg">
                <div className="flex items-center mb-3">
                  <span className="text-2xl mr-3">üèõÔ∏è</span>
                  <h3 className="text-lg font-semibold text-red-700">
                    B·ªô c√¢u h·ªèi t∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh
                  </h3>
                </div>

                <div className="bg-gradient-to-r from-red-50 to-orange-50 p-3 rounded-lg border border-red-200">
                  <p className="text-gray-700 text-center text-sm">
                    <strong>20 c√¢u h·ªèi</strong> v·ªÅ t∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh v·ªÅ ƒê·∫£ng
                    C·ªông s·∫£n Vi·ªát Nam v√† Nh√† n∆∞·ªõc c·ªßa d√¢n, do d√¢n, v√¨ d√¢n
                  </p>
                </div>
              </Card>
            </motion.div>

            {/* Quiz Content */}
            <div className="flex-1 overflow-y-auto scrollbar-thin scrollbar-thumb-red-300 scrollbar-track-gray-100">
              <AnimatePresence mode="wait">
                <motion.div
                  key={selectedQuiz}
                  initial={{ opacity: 0, x: 20 }}
                  animate={{ opacity: 1, x: 0 }}
                  exit={{ opacity: 0, x: -20 }}
                  transition={{ duration: 0.3 }}
                >
                  <Quiz
                    questions={currentQuiz.questions}
                    onComplete={handleQuizComplete}
                  />
                </motion.div>
              </AnimatePresence>
            </div>
          </div>

          {/* Right side - Leaderboard (40% width) */}
          <div className="lg:col-span-5 flex flex-col overflow-hidden">
            <motion.div
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: 0.3 }}
              className="h-full flex flex-col"
            >
              <Card
                className="shadow-lg h-full flex flex-col"
                title={
                  <div className="flex items-center justify-between">
                    <div className="flex items-center">
                      <TrophyOutlined className="text-yellow-500 text-xl mr-2" />
                      <span className="font-bold">B·∫£ng x·∫øp h·∫°ng</span>
                    </div>
                    <Button
                      type="text"
                      icon={<ReloadOutlined />}
                      onClick={fetchQuizResults}
                      loading={loadingResults}
                      size="small"
                      className="hover:text-red-600"
                    />
                  </div>
                }
                bodyStyle={{
                  padding: "12px",
                  flexGrow: 1,
                  overflow: "hidden",
                  display: "flex",
                  flexDirection: "column",
                }}
              >
                {loadingResults ? (
                  <div className="flex-1 flex items-center justify-center">
                    <Spin size="large" />
                  </div>
                ) : quizResults.length > 0 ? (
                  <div className="flex-1 overflow-hidden">
                    <Table
                      dataSource={quizResults}
                      columns={columns}
                      rowKey="id"
                      pagination={false}
                      size="small"
                      scroll={{ y: "calc(100vh - 350px)", x: 650 }}
                      className="custom-table"
                    />
                  </div>
                ) : (
                  <div className="flex-1 flex flex-col items-center justify-center text-gray-500">
                    <TrophyOutlined className="text-6xl mb-3 opacity-30" />
                    <p className="text-lg font-semibold">Ch∆∞a c√≥ k·∫øt qu·∫£ n√†o</p>
                    <p className="text-sm">H√£y l√† ng∆∞·ªùi ƒë·∫ßu ti√™n!</p>
                  </div>
                )}
              </Card>
            </motion.div>
          </div>
        </div>

        {/* Save Result Modal */}
        <Modal
          title={
            <div className="flex items-center">
              <TrophyOutlined className="text-yellow-500 text-2xl mr-2" />
              <span>Ho√†n th√†nh Quiz!</span>
            </div>
          }
          open={showResultModal}
          onCancel={null}
          closable={false}
          maskClosable={false}
          keyboard={false}
          footer={null}
          centered
        >
          {currentScore && (
            <div className="text-center mb-6">
              <div className="text-6xl mb-4">
                {currentScore.score >= currentScore.totalQuestions * 0.7
                  ? "üéâ"
                  : currentScore.score >= currentScore.totalQuestions * 0.5
                  ? "üòä"
                  : "üìö"}
              </div>
              <h3 className="text-2xl font-bold mb-2">
                ƒêi·ªÉm s·ªë: {currentScore.score}/{currentScore.totalQuestions}
              </h3>
              <p className="text-lg text-gray-600 mb-2">
                T·ª∑ l·ªá ƒë√∫ng:{" "}
                {Math.round(
                  (currentScore.score / currentScore.totalQuestions) * 100
                )}
                %
              </p>
              {completionTime !== null && (
                <div className="flex items-center justify-center text-blue-600">
                  <ClockCircleOutlined className="mr-2" />
                  <span className="font-semibold text-lg">
                    Th·ªùi gian ho√†n th√†nh: {formatTime(completionTime)}
                  </span>
                </div>
              )}
            </div>
          )}

          <Form
            form={form}
            onFinish={() =>
              saveQuizResult(
                currentScore.score,
                currentScore.totalQuestions,
                true
              )
            }
            layout="vertical"
          >
            <Form.Item
              label="Nh·∫≠p t√™n c·ªßa b·∫°n ƒë·ªÉ l∆∞u k·∫øt qu·∫£"
              name="playerName"
              rules={[
                {
                  required: true,
                  message: "Vui l√≤ng nh·∫≠p t√™n c·ªßa b·∫°n!",
                },
                {
                  min: 2,
                  message: "T√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±!",
                },
                {
                  max: 50,
                  message: "T√™n kh√¥ng ƒë∆∞·ª£c qu√° 50 k√Ω t·ª±!",
                },
              ]}
            >
              <Input
                placeholder="T√™n c·ªßa b·∫°n"
                value={playerName}
                onChange={(e) => setPlayerName(e.target.value)}
                size="large"
                autoFocus
              />
            </Form.Item>

            <Form.Item>
              <Button
                type="primary"
                htmlType="submit"
                className="w-full bg-red-600 hover:bg-red-700"
                size="large"
              >
                L∆∞u k·∫øt qu·∫£
              </Button>
            </Form.Item>
          </Form>

          <div className="text-center text-sm text-gray-500 mt-4">
            <strong>L∆∞u √Ω:</strong> B·∫°n ph·∫£i nh·∫≠p t√™n ƒë·ªÉ l∆∞u k·∫øt qu·∫£
          </div>
        </Modal>
      </div>

      <style jsx>{`
        .custom-table .ant-table-thead > tr > th {
          background-color: #fef2f2;
          font-weight: 600;
          color: #991b1b;
        }
        .custom-table .ant-table-tbody > tr:hover > td {
          background-color: #fff7ed;
        }
        .scrollbar-thin::-webkit-scrollbar {
          width: 6px;
        }
        .scrollbar-thin::-webkit-scrollbar-track {
          background: #f3f4f6;
          border-radius: 3px;
        }
        .scrollbar-thin::-webkit-scrollbar-thumb {
          background: #fca5a5;
          border-radius: 3px;
        }
        .scrollbar-thin::-webkit-scrollbar-thumb:hover {
          background: #f87171;
        }
      `}</style>
    </div>
  );
};

export default QuizPage;